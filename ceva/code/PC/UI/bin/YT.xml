<?xml version="1.0"?>
<doc>
<assembly>
<name>
YT
</name>
</assembly>
<members>
<member name="P:YT.Security.ImpBusinessIdentity.IsAuthenticated">
	<summary>
 Implements the IsAuthenticated property defined by IIdentity.
 </summary>
</member><member name="P:YT.Security.ImpBusinessIdentity.AuthenticationType">
	<summary>
 Implements the AuthenticationType property defined by IIdentity.
 </summary>
</member><member name="P:YT.Security.ImpBusinessIdentity.Name">
	<summary>
 Implements the Name property defined by IIdentity.
 </summary>
</member><member name="M:YT.Security.ImpBusinessIdentity.DataPortal_Fetch(System.Object)">
	<summary>
 Retrieves the identity data for a specific user.
 </summary>
</member><member name="P:YT.Security.ImpBusinessPrincipal.Identity">
	<summary>
 Implements the Identity property defined by IPrincipal.
 </summary>
</member><member name="M:YT.Security.ImpBusinessPrincipal.IsInRole(System.String)">
	<summary>
 Implements the IsInRole property defined by IPrincipal.
 </summary>
</member><member name="M:YT.Security.ImpBusinessPrincipal.Login(System.String,System.String)">
	<summary>
 Initiates a login process using custom CSLA .NET security.
 </summary>
	<remarks>
 As described in the book, this invokes a login process using
 a table-based authentication scheme and a list of roles in
 the database tables. By replacing the code in
 <see cref="T:CSLA.Security.BusinessIdentity"/> you can easily
 adapt this scheme to authenticate the user against any database
 or other scheme.
 </remarks>
	<param name="Username">The user's username.</param>
	<param name="Password">The user's password.</param>
</member>
</members>
</doc>